// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// GetJWKSURI provides a mock function with given fields: ctx
func (_m *Client) GetJWKSURI(ctx context.Context) (*string, error) {
	ret := _m.Called(ctx)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetJWKSURI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJWKSURI'
type Client_GetJWKSURI_Call struct {
	*mock.Call
}

// GetJWKSURI is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetJWKSURI(ctx interface{}) *Client_GetJWKSURI_Call {
	return &Client_GetJWKSURI_Call{Call: _e.mock.On("GetJWKSURI", ctx)}
}

func (_c *Client_GetJWKSURI_Call) Run(run func(ctx context.Context)) *Client_GetJWKSURI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetJWKSURI_Call) Return(_a0 *string, _a1 error) *Client_GetJWKSURI_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetJWKSURI_Call) RunAndReturn(run func(context.Context) (*string, error)) *Client_GetJWKSURI_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenEndpoint provides a mock function with given fields: ctx
func (_m *Client) GetTokenEndpoint(ctx context.Context) (*string, error) {
	ret := _m.Called(ctx)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetTokenEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenEndpoint'
type Client_GetTokenEndpoint_Call struct {
	*mock.Call
}

// GetTokenEndpoint is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetTokenEndpoint(ctx interface{}) *Client_GetTokenEndpoint_Call {
	return &Client_GetTokenEndpoint_Call{Call: _e.mock.On("GetTokenEndpoint", ctx)}
}

func (_c *Client_GetTokenEndpoint_Call) Run(run func(ctx context.Context)) *Client_GetTokenEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetTokenEndpoint_Call) Return(_a0 *string, _a1 error) *Client_GetTokenEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetTokenEndpoint_Call) RunAndReturn(run func(context.Context) (*string, error)) *Client_GetTokenEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
